{"version":3,"file":"0.chunk.js","sources":["webpack:///./src/app/pager/pager.component.css","webpack:///./src/app/pager/pager.component.css?73d6","webpack:///./src/app/movies/movie-single/movie-single.component.html","webpack:///./src/app/movies/movie-single/movie-single.component.ts","webpack:///./src/app/movies/movie.model.ts","webpack:///./src/app/movies/movie.service.ts","webpack:///./src/app/movies/movies-latest/movies-latest.component.ts","webpack:///./src/app/movies/movies-list-layout.html","webpack:///./src/app/movies/movies-most-voted/movies-most-voted.component.ts","webpack:///./src/app/movies/movies-routing.module.ts","webpack:///./src/app/movies/movies-top-rated/movies-top-rated.component.ts","webpack:///./src/app/movies/movies.component.html","webpack:///./src/app/movies/movies.component.ts","webpack:///./src/app/movies/movies.module.ts","webpack:///./src/app/pager/pager.component.css?bde0","webpack:///./src/app/pager/pager.component.html","webpack:///./src/app/pager/pager.component.ts","webpack:///./src/app/pager/pager.module.ts","webpack:///./src/app/pager/pager.service.ts"],"sourcesContent":["exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".pagination {\\r\\n    margin-top: 20px;\\r\\n}\\r\\n\\r\\n.pagination > li > a {\\r\\n    background-color: #534b4e !important;\\r\\n}\\r\\n\\r\\n.page-item {\\r\\n    border-radius: 20%;\\r\\n}\\r\\n\\r\\n.page-item > a {\\r\\n    background-color: #393134;\\r\\n    color: #9c9195;\\r\\n}\\r\\n\\r\\n.page-item > a:hover {\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n.page-link {\\r\\n    border: unset;\\r\\n\\r\\n}\\r\\n\\r\\n.page-link:focus {\\r\\n    box-shadow: unset;\\r\\n}\", \"\"]);\n\n// exports\n","\nvar content = require(\"!!../../../node_modules/css-loader/index.js!./pager.component.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!./pager.component.css\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!./pager.component.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","module.exports = \"<div class=\\\"wrapper\\\">\\r\\n    <div class=\\\"single-container\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n\\r\\n            <div class=\\\"col-md-4 col-sm-12 col-xs-12\\\">\\r\\n                <div class=\\\"poster-image sticky\\\">\\r\\n                    <img src=\\\"{{movie?.poster_path? 'https://image.tmdb.org/t/p/w342/' + movie.poster_path : 'http://via.placeholder.com/342x513?text=No%20Poster%20Image'}}\\\"\\r\\n                         alt=\\\"Poster\\\">\\r\\n                </div>\\r\\n                <div class=\\\"poster-buttons\\\" *ngIf=\\\"movie?.videos['results'].length != 0\\\">\\r\\n                    <div class=\\\"btn-transform transform-vertical red\\\">\\r\\n                        <div (click)=\\\"openVerticallyCentered(content)\\\" class=\\\"youtube item item-1 redbtn\\\">Watch Trailer</div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-md-8 col-sm-12 col-xs-12\\\">\\r\\n                <div class=\\\"main-content\\\">\\r\\n                    <h1 class=\\\"title\\\">{{movie?.title}}</h1>\\r\\n\\r\\n                    <div class=\\\"social-btn\\\">\\r\\n                        <a href=\\\"#\\\" class=\\\"parent-btn\\\"><i class=\\\"fa fa-heart\\\"></i>&nbsp;Add to Favorite</a>\\r\\n                        <a href=\\\"#\\\" class=\\\"parent-btn\\\"><i class=\\\"fa fa-thumbs-up\\\"></i>&nbsp;Like</a>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"rating-single\\\">\\r\\n                        <div class=\\\"rate\\\">\\r\\n                            <i class=\\\"fa fa-star\\\"></i>\\r\\n                            <p><span>{{movie?.vote_average}}</span> /10<br>\\r\\n                                <span class=\\\"avrg\\\">{{movie?.vote_count}} Votes</span>\\r\\n                            </p>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"info\\\">\\r\\n                        <div class=\\\"content\\\">\\r\\n                            <div class=\\\"overview\\\">\\r\\n                                <div class=\\\"row\\\">\\r\\n                                    <div class=\\\"col-md-8 col-sm-12 col-xs-12\\\">\\r\\n                                        <div class=\\\"title-hd-sm\\\">\\r\\n                                            <h4>Overview</h4>\\r\\n                                        </div>\\r\\n                                        <p>{{movie?.overview}}</p>\\r\\n                                        <div class=\\\"title-hd-sm\\\">\\r\\n                                            <h4>Cast</h4>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"cast-item\\\" *ngFor=\\\"let cast of movie?.credits['cast'] | slice:0:7\\\">\\r\\n                                            <div class=\\\"cast-it\\\">\\r\\n                                                <div class=\\\"cast-left\\\">\\r\\n                                                    <img src=\\\"{{cast['profile_path']? 'https://image.tmdb.org/t/p/w45' + cast['profile_path'] : 'http://via.placeholder.com/45x45?text=No%20Profile%20Image'}}\\\"\\r\\n                                                         alt=\\\"Actor picture\\\">\\r\\n                                                    <p class=\\\"actor\\\" data-toggle=\\\"tooltip\\\" data-placement=\\\"top\\\"\\r\\n                                                       title=\\\"{{cast['name']}}\\\">&nbsp;{{cast['name'].length > 20 ? (cast['name'] | slice:0:20) + '...' : cast['name']}}</p>\\r\\n                                                </div>\\r\\n                                                <p class=\\\"character\\\" data-toggle=\\\"tooltip\\\" data-placement=\\\"top\\\" title=\\\"{{cast['character']}}\\\"> as {{cast['character'].length > 20 ? (cast['character'].indexOf('/') > 0 ? cast['character'].substring(0, cast['character'].indexOf('/')) : (cast['character'] | slice:0:20) + '...') : cast['character']}}</p>\\r\\n                                            </div>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                    <div class=\\\"col-md-4 col-xs-12 col-sm-12\\\">\\r\\n                                        <div class=\\\"title-hd-sm\\\">\\r\\n                                            <h4>Info</h4>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"sb-it\\\" *ngIf=\\\"movie?.homepage != null\\\">\\r\\n                                            <p>\\r\\n                                                <a href=\\\"{{movie.homepage}}\\\">Homepage</a>\\r\\n                                            </p>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"sb-it\\\">\\r\\n                                            <h6>Director: </h6>\\r\\n                                            <p>{{movie?.credits['crew'][1]['name']}}</p>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"sb-it\\\">\\r\\n                                            <h6>Genres:</h6>\\r\\n                                            <p><span *ngFor=\\\"let genre of movie?.genres; let i = index\\\">\\r\\n                                                {{genre['name']}}<span *ngIf=\\\"i < movie.genres.length - 1\\\">, </span>\\r\\n                                            </span></p>\\r\\n                                        </div>\\r\\n                                        <div class=\\\"sb-it\\\">\\r\\n                                            <h6>Release</h6>\\r\\n                                            <p>{{movie?.release_date}}</p>\\r\\n                                        </div>\\r\\n                                    </div>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<ng-template #content let-c=\\\"close\\\" let-d=\\\"dismiss\\\">\\r\\n    <div class=\\\"modal-header\\\">\\r\\n        <h4 class=\\\"modal-title\\\">Trailer</h4>\\r\\n        <button type=\\\"button\\\" class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"d('Cross click')\\\">\\r\\n            <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n        </button>\\r\\n    </div>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n        <iframe width=\\\"100%\\\" height=\\\"315\\\" [src]=\\\"trailer\\\" frameborder=\\\"0\\\" allowfullscreen></iframe>\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-light\\\" (click)=\\\"c('Close click')\\\">Close</button>\\r\\n    </div>\\r\\n</ng-template>\";","import {Component, Input} from \"@angular/core\";\r\nimport {Movie} from \"../movie.model\";\r\nimport {MovieService} from \"../movie.service\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\nimport {NgTemplateOutlet} from \"@angular/common\";\r\nimport {DomSanitizer} from \"@angular/platform-browser\";\r\nimport {NgbModal} from \"@ng-bootstrap/ng-bootstrap\";\r\n\r\n@Component({\r\n    selector: 'app-movie-single',\r\n    template: require('./movie-single.component.html')\r\n})\r\nexport class MovieSingleComponent {\r\n    movie: Movie;\r\n    @Input() trailer: any;\r\n    closeResult: string;\r\n\r\n    constructor(\r\n        private movieService: MovieService,\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private modalService: NgbModal,\r\n        private sanitizer: DomSanitizer\r\n    ) {\r\n        this.route.params.subscribe(param => {\r\n            if (param['id']) {\r\n                this.movieService.getMovie(param['id'])\r\n                    .catch(err => router.navigate(['/latest']))\r\n                    .subscribe(item => this.movie = this.movieService.movieFactory(item));\r\n            }\r\n        })\r\n    }\r\n\r\n    openVerticallyCentered(content: NgTemplateOutlet) {\r\n        this.trailer = this.sanitizer.bypassSecurityTrustResourceUrl(`https://www.youtube.com/embed/${this.movie.videos['results'][0]['key']}`);\r\n        this.modalService.open(content, {centered: true, size: \"lg\"});\r\n    }\r\n}","export class Movie {\r\n    constructor(\r\n        public id: string,\r\n        public title: string,\r\n        public vote_count: number,\r\n        public vote_average: number,\r\n        public original_language: string,\r\n        public poster_path: string,\r\n        public backdrop_path: string,\r\n        public runtime: number,\r\n        public credits: string[],\r\n        public genres: string[],\r\n        public adult: boolean,\r\n        public overview: string,\r\n        public release_date: string,\r\n        public homepage: string,\r\n        public videos: string\r\n    ) {}\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport 'rxjs/Rx';\r\nimport {Movie} from \"./movie.model\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {PagerService} from \"../pager/pager.service\";\r\n\r\n@Injectable()\r\nexport class MovieService {\r\n    private api_key = \"b90f2062e134afc5faff86358be3902e\";\r\n    private discoverQuery = \"https://api.themoviedb.org/3/discover/movie\";\r\n    private singleMovieQuery = \"https://api.themoviedb.org/3/movie\";\r\n\r\n    constructor(private http: HttpClient, private pagerService: PagerService) {}\r\n\r\n    getLatest() {\r\n        console.log('GETLATEST CHIAMATO');\r\n        const params = {\r\n            api_key: this.api_key,\r\n            language: 'en',\r\n            sort_by: 'popularity.desc',\r\n            include_adult: 'false',\r\n            include_video: 'false',\r\n            'primary_release_date.lte': this.getToday(),\r\n            'primary_release_date.gte': this.getOneMonthAgo(),\r\n            page: this.pagerService.page.toString()\r\n        };\r\n\r\n        return this.http.get(this.discoverQuery, {params})\r\n            .map(res => {\r\n                this.pagerService.totalPages = res['total_pages'];\r\n                return res['results'];\r\n            })\r\n            .switchMap(movies => Observable.from(movies))\r\n            .catch(err => Observable.throw(err));\r\n    }\r\n\r\n    getTopRated() {\r\n        console.log('GET TOP RATED CHIAMATO');\r\n        const params = {\r\n            api_key: this.api_key,\r\n            language: 'en',\r\n            sort_by: 'vote_average.desc',\r\n            include_adult: 'false',\r\n            include_video: 'false',\r\n            'vote_average.gte': '6',\r\n            'vote_count.gte': '1500',\r\n            page: this.pagerService.page.toString()\r\n        };\r\n\r\n        return this.http.get(this.discoverQuery, {params})\r\n            .map(res => {\r\n                this.pagerService.totalPages = res['total_pages'];\r\n                return res['results'];\r\n            })\r\n            .switchMap(movies => Observable.from(movies))\r\n            .catch(err => Observable.throw(err));\r\n    }\r\n\r\n    getMostVoted() {\r\n        console.log('GET MOST VOTED CHIAMATO');\r\n        const params = {\r\n            api_key: this.api_key,\r\n            language: 'en',\r\n            sort_by: 'vote_count.desc',\r\n            include_adult: 'false',\r\n            include_video: 'false',\r\n            page: this.pagerService.page.toString()\r\n        };\r\n\r\n        return this.http.get(this.discoverQuery, {params})\r\n            .map(res => {\r\n                this.pagerService.totalPages = res['total_pages'];\r\n                return res['results'];\r\n            })\r\n            .switchMap(movies => Observable.from(movies))\r\n            .catch(err => Observable.throw(err));\r\n    }\r\n\r\n    getMovie(id: number) {\r\n        const params = {\r\n            api_key: this.api_key,\r\n            language: 'en',\r\n            append_to_response: 'videos,credits'\r\n        };\r\n\r\n        return this.http.get(`${this.singleMovieQuery}/${id}`, {params})\r\n            .map(res => res)\r\n            .catch(err => Observable.throw(\"Movie not found\"));\r\n    }\r\n\r\n    movieFactory(item: Movie): Movie {\r\n        return new Movie(\r\n            item.id,\r\n            item.title,\r\n            item.vote_count,\r\n            item.vote_average,\r\n            item.original_language,\r\n            item.poster_path,\r\n            item.backdrop_path,\r\n            item.runtime,\r\n            item.credits,\r\n            item.genres,\r\n            item.adult,\r\n            item.overview,\r\n            item.release_date,\r\n            item.homepage ? item.homepage : \"\",\r\n            item.videos\r\n        );\r\n    }\r\n\r\n    private getToday(): string {\r\n        let date = new Date();\r\n\r\n        return `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()}`;\r\n    }\r\n\r\n    private getOneMonthAgo(): string {\r\n        let date = new Date();\r\n\r\n        return `${(date.getMonth() === 0 ? date.getFullYear() - 1 : date.getFullYear())}-${(date.getMonth() === 0 ? date.getMonth() + 12 : date.getMonth())}-${date.getDate()}`;\r\n    }\r\n\r\n}","import {Component} from \"@angular/core\";\r\nimport {Movie} from \"../movie.model\";\r\nimport {MovieService} from \"../movie.service\";\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {PagerService} from \"../../pager/pager.service\";\r\n\r\n@Component({\r\n    selector: 'app-movies-latest',\r\n    template: require('../movies-list-layout.html')\r\n})\r\nexport class MoviesLatestComponent {\r\n    private movies: Movie[] = [];\r\n\r\n    constructor(private movieService: MovieService, private pagerService: PagerService, private route: ActivatedRoute) {\r\n        this.route.params.subscribe(param => {\r\n            if (param['page']) {\r\n                console.log('HO TROVATO UN PARAMETRO E SI CHIAMA: ' + param['page']);\r\n                this.pagerService.page = param['page'];\r\n                this.onLatest();\r\n            } else {\r\n                this.pagerService.page = 1;\r\n                this.onLatest();\r\n            }\r\n        })\r\n    }\r\n\r\n    onLatest() {\r\n        this.movies = [];\r\n        this.movieService.getLatest()\r\n            .subscribe((movie: Movie) => this.movies.push(this.movieService.movieFactory(movie)));\r\n        console.log(this.movies);\r\n    }\r\n}","module.exports = \"<div class=\\\"wrapper\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-3 col-md-6\\\" *ngFor=\\\"let movie of movies\\\">\\r\\n            <a [routerLink]=\\\"['/movies', 'movie', movie.id]\\\" class=\\\"card\\\" style=\\\"width: 18rem;\\\">\\r\\n                <img class=\\\"card-img-top poster\\\"\\r\\n                     src=\\\"{{movie.poster_path? 'https://image.tmdb.org/t/p/w300' + movie.poster_path: 'http://via.placeholder.com/300x450/ffffff/00000?text=No+Poster'}}\\\"\\r\\n                     alt=\\\"Card image cap\\\">\\r\\n                <div class=\\\"card-body\\\">\\r\\n                    <div class=\\\"card-text\\\">\\r\\n                        <div class=\\\"title\\\"><span>{{movie.title}}</span></div>\\r\\n                        <div class=\\\"rating\\\"><i class=\\\"fa fa-star\\\" style=\\\"color: yellow;\\\"></i> <span><b>{{movie.vote_average}}</b></span></div>\\r\\n                        <div class=\\\"release\\\">Release: <span><b>{{movie.release_date}}</b></span></div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </a>\\r\\n        </div>\\r\\n    </div>\\r\\n    <app-pager [currentPage]=\\\"pagerService.page\\\"\\r\\n               [totalPages]=\\\"pagerService.totalPages\\\"\\r\\n    ></app-pager>\\r\\n</div>\";","import {Component} from \"@angular/core\";\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {Movie} from \"../movie.model\";\r\nimport {MovieService} from \"../movie.service\";\r\nimport {PagerService} from \"../../pager/pager.service\";\r\n\r\n@Component({\r\n    selector: 'app-movies-most-voted',\r\n    template: require('../movies-list-layout.html')\r\n})\r\nexport class MoviesMostVotedComponent {\r\n    private movies: Movie[] = [];\r\n\r\n    constructor(private movieService: MovieService, private pagerService: PagerService, private route: ActivatedRoute) {\r\n        this.route.params.subscribe(param => {\r\n            if (param['page']) {\r\n                this.pagerService.page = param['page'];\r\n                this.onMostVoted();\r\n            } else {\r\n                this.pagerService.page = 1;\r\n                this.onMostVoted();\r\n            }\r\n        })\r\n    }\r\n\r\n    onMostVoted() {\r\n        this.movies = [];\r\n        this.movieService.getMostVoted()\r\n            .subscribe((movie: Movie) => this.movies.push(this.movieService.movieFactory(movie)));\r\n    }\r\n}","import {NgModule} from \"@angular/core\";\r\nimport {RouterModule, Routes} from \"@angular/router\";\r\nimport {MoviesComponent} from \"./movies.component\";\r\nimport {MoviesLatestComponent} from \"./movies-latest/movies-latest.component\";\r\nimport {MoviesTopRatedComponent} from \"./movies-top-rated/movies-top-rated.component\";\r\nimport {MoviesMostVotedComponent} from \"./movies-most-voted/movies-most-voted.component\";\r\nimport {MovieSingleComponent} from \"./movie-single/movie-single.component\";\r\n\r\nconst moviesRoutes: Routes = [\r\n    {\r\n        path: '', component: MoviesComponent, children: [\r\n            {path: '', redirectTo: 'latest', pathMatch: 'full'},\r\n            {path: 'movie/:id', component: MovieSingleComponent},\r\n            {path: 'latest', component: MoviesLatestComponent},\r\n            {path: 'top-rated', component: MoviesTopRatedComponent},\r\n            {path: 'most-voted', component: MoviesMostVotedComponent}\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(moviesRoutes)],\r\n    exports: [RouterModule]\r\n})\r\n\r\nexport class MoviesRoutingModule {\r\n}","import {Component} from \"@angular/core\";\r\nimport {MovieService} from \"../movie.service\";\r\nimport {Movie} from \"../movie.model\";\r\nimport {ActivatedRoute} from \"@angular/router\";\r\nimport {PagerService} from \"../../pager/pager.service\";\r\n\r\n@Component({\r\n    selector: 'app-movies-top-rated',\r\n    template: require('../movies-list-layout.html')\r\n})\r\nexport class MoviesTopRatedComponent {\r\n    private movies: Movie[] = [];\r\n\r\n    constructor(private movieService: MovieService, private pagerService: PagerService, private route: ActivatedRoute) {\r\n        this.route.params.subscribe(param => {\r\n            if (param['page']) {\r\n                this.pagerService.page = param['page'];\r\n                this.onTopRated();\r\n            } else {\r\n                this.pagerService.page = 1;\r\n                this.onTopRated();\r\n            }\r\n        })\r\n    }\r\n\r\n    onTopRated() {\r\n        this.movies = [];\r\n        this.movieService.getTopRated()\r\n            .subscribe((movie: Movie) => this.movies.push(this.movieService.movieFactory(movie)));\r\n    }\r\n    \r\n}","module.exports = \"<div class=\\\"container\\\">\\r\\n    <router-outlet></router-outlet>\\r\\n</div>\";","import {Component, OnInit} from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'app-movies',\r\n    template: require('./movies.component.html')\r\n})\r\nexport class MoviesComponent implements OnInit{\r\n\r\n\r\n    constructor(){\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n}","import {NgModule} from \"@angular/core\";\r\nimport {MovieService} from \"./movie.service\";\r\nimport {MoviesLatestComponent} from \"./movies-latest/movies-latest.component\";\r\nimport {MoviesMostVotedComponent} from \"./movies-most-voted/movies-most-voted.component\";\r\nimport {MoviesTopRatedComponent} from \"./movies-top-rated/movies-top-rated.component\";\r\nimport {MoviesRoutingModule} from \"./movies-routing.module\";\r\nimport {MoviesComponent} from \"./movies.component\";\r\nimport {HttpClientModule} from \"@angular/common/http\";\r\nimport {CommonModule} from \"@angular/common\";\r\nimport {MovieSingleComponent} from \"./movie-single/movie-single.component\";\r\nimport {RouterModule} from \"@angular/router\";\r\nimport {PagerComponent} from \"../pager/pager.component\";\r\nimport {NgbPaginationModule} from \"@ng-bootstrap/ng-bootstrap\";\r\nimport {PagerService} from \"../pager/pager.service\";\r\nimport {PagerModule} from \"../pager/pager.module\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        MoviesRoutingModule,\r\n        HttpClientModule,\r\n        RouterModule,\r\n        CommonModule,\r\n        PagerModule\r\n    ],\r\n    declarations: [\r\n        MoviesComponent,\r\n        MovieSingleComponent,\r\n        MoviesLatestComponent,\r\n        MoviesTopRatedComponent,\r\n        MoviesMostVotedComponent,\r\n    ],\r\n    providers: [\r\n        MovieService\r\n    ]\r\n})\r\nexport class MoviesModule {\r\n    \r\n}","\n        var result = require(\"!!../../../node_modules/style-loader/index.js!../../../node_modules/css-loader/index.js!./pager.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","module.exports = \"<ngb-pagination *ngIf=\\\"totalPages\\\" class=\\\"d-flex justify-content-center dark\\\"\\r\\n                [collectionSize]=\\\"totalPages > 1000 ? 1000 : totalPages\\\"\\r\\n                [(page)]=\\\"currentPage\\\"\\r\\n                [maxSize]=\\\"5\\\"\\r\\n                [rotate]=\\\"true\\\"\\r\\n                [ellipses]=\\\"false\\\"\\r\\n                [boundaryLinks]=\\\"true\\\"\\r\\n                (pageChange)=\\\"setPage($event)\\\"\\r\\n>\\r\\n</ngb-pagination>\";","import {Component, Input} from \"@angular/core\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\nimport {PagerService} from \"./pager.service\";\r\n\r\n@Component({\r\n    selector: 'app-pager',\r\n    template: require('./pager.component.html'),\r\n    styles: [require('./pager.component.css')]\r\n})\r\nexport class PagerComponent {\r\n    @Input() currentPage: number;\r\n    @Input() totalPages: number;\r\n\r\n    constructor(private pagerService: PagerService, private route: ActivatedRoute, private router: Router) {\r\n    }\r\n\r\n    setPage(page: number) {\r\n        this.pagerService.page = page;\r\n        this.router.navigate([{ page: page }], {relativeTo: this.route})\r\n            .catch(err => console.error(err));\r\n    }\r\n}","import {NgModule} from \"@angular/core\";\r\nimport {PagerComponent} from \"./pager.component\";\r\nimport {PagerService} from \"./pager.service\";\r\nimport {NgbPaginationModule} from \"@ng-bootstrap/ng-bootstrap\";\r\nimport {CommonModule} from \"@angular/common\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        NgbPaginationModule\r\n    ],\r\n    exports: [\r\n        PagerComponent\r\n    ],\r\n    declarations: [\r\n        PagerComponent\r\n    ],\r\n    providers: [\r\n        PagerService\r\n    ]\r\n})\r\nexport class PagerModule {\r\n\r\n}","import {Injectable} from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class PagerService {\r\n    private _page: number = 1;\r\n    private _totalPages: number = 0;\r\n\r\n    get page() {\r\n        return this._page;\r\n    }\r\n\r\n    set page(page: number) {\r\n        this._page = page;\r\n    }\r\n\r\n    get totalPages() {\r\n        return this._totalPages;\r\n    }\r\n\r\n    set totalPages(totalPages: number) {\r\n        this._totalPages = totalPages;\r\n    }\r\n}"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnBA;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AAEA;AACA;AAMA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAtBA;AAAA;;AAAA;AAFA;AAJA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAVA;AAyBA;AAAA;AAzBA;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAlBA;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAKA;AAAA;AAAA;AAJA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAiBA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAjHA;AADA;AAMA;AALA;AAmHA;AAAA;AAnHA;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AAEA;AACA;AACA;AAMA;AAGA;AAAA;AAAA;AAAA;AAAA;AAFA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AArBA;AAJA;AACA;AACA;AACA;AAIA;AAHA;AAsBA;AAAA;AAtBA;;;;;;;;;;;;ACVA;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AACA;AAMA;AAGA;AAAA;AAAA;AAAA;AAAA;AAFA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAnBA;AAJA;AACA;AACA;AACA;AAIA;AAHA;AAoBA;AAAA;AApBA;;;;;;;;;;;;;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AADA;AALA;AACA;AACA;AACA;AAEA;AACA;AAAA;AADA;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AAEA;AACA;AAMA;AAGA;AAAA;AAAA;AAAA;AAAA;AAFA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAnBA;AAJA;AACA;AACA;AACA;AAIA;AAHA;AAqBA;AAAA;AArBA;;;;;;;;;;;;ACVA;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAMA;AAGA;AAEA;AAEA;AAEA;AATA;AAJA;AACA;AACA;AACA;;AACA;AAUA;AAAA;AAVA;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAqBA;AAAA;AAEA;AAFA;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAFA;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACRA;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAOA;AAIA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAVA;AAAA;;AAAA;AACA;AAAA;;AAAA;AAFA;AALA;AACA;AACA;AACA;AACA;AAKA;AAJA;AAYA;AAAA;AAZA;;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AAiBA;AAAA;AAEA;AAFA;AAfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAFA;;;;;;;;;;;;;;;;;;;;;ACrBA;AAGA;AADA;AAEA;AACA;AAiBA;AAfA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AAJA;AAMA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;AAJA;AAdA;AADA;AACA;AAmBA;AAAA;AAnBA;;;;;A","sourceRoot":""}