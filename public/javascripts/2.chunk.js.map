{"version":3,"file":"2.chunk.js","sources":["webpack:///./src/app/auth/account/account.component.css","webpack:///./src/app/auth/account/account.component.css?881a","webpack:///./src/app/auth/account/account.component.css?8dbf","webpack:///./src/app/auth/account/account.component.html","webpack:///./src/app/auth/account/account.component.ts","webpack:///./src/app/auth/account/account.service.ts","webpack:///./src/app/auth/auth-guard.service.ts","webpack:///./src/app/auth/auth-routing.module.ts","webpack:///./src/app/auth/auth.module.ts","webpack:///./src/app/auth/signin/signin.component.html","webpack:///./src/app/auth/signin/signin.component.ts","webpack:///./src/app/auth/signup/signup.component.html","webpack:///./src/app/auth/signup/signup.component.ts","webpack:///./src/app/auth/user.model.ts"],"sourcesContent":["exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".errors {\\r\\n    display: block;\\r\\n}\\r\\n\\r\\n.account-settings {\\r\\n    margin-left: auto;\\r\\n    margin-right: auto;\\r\\n}\\r\\n\\r\\nfieldset {\\r\\n    border: 1px solid chartreuse;\\r\\n    padding: 10px;\\r\\n}\\r\\n\\r\\nlegend {\\r\\n    color: white;\\r\\n    width: unset;\\r\\n}\", \"\"]);\n\n// exports\n","\nvar content = require(\"!!../../../../node_modules/css-loader/index.js!./account.component.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../node_modules/css-loader/index.js!./account.component.css\", function() {\n\t\tvar newContent = require(\"!!../../../../node_modules/css-loader/index.js!./account.component.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","\n        var result = require(\"!!../../../../node_modules/style-loader/index.js!../../../../node_modules/css-loader/index.js!./account.component.css\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    ","module.exports = \"<div class=\\\"container\\\">\\r\\n    <div class=\\\"wrapper col-md-12\\\">\\r\\n        <form *ngIf=\\\"user\\\" class=\\\"account-settings\\\" (ngSubmit)=\\\"onUpdate()\\\" [formGroup]=\\\"accountSettingsForm\\\">\\r\\n            <fieldset>\\r\\n                <legend>Account Settings</legend>\\r\\n                <div class=\\\"form-group row justify-content-center\\\">\\r\\n                    <label for=\\\"username\\\" class=\\\"col-lg-1 col-form-label\\\">Username</label>\\r\\n                    <div class=\\\"col-lg-10\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"username\\\" formControlName=\\\"username\\\">\\r\\n                    </div>\\r\\n                    <div class=\\\"col-lg-1\\\">\\r\\n                        <i style=\\\"color: white;\\\" class=\\\"fa fa-pencil fa-2x\\\"></i>\\r\\n                    </div>\\r\\n                    <div *ngIf=\\\"!accountSettingsForm.get('username').valid &&\\r\\n                     accountSettingsForm.get('username').touched\\\" class=\\\"errors col-lg-12 text-danger font-weight-bold\\\">\\r\\n                        <div *ngIf=\\\"accountSettingsForm.get('username').errors['required']\\\"\\r\\n                        >This field is required\\r\\n                        </div>\\r\\n                        <div *ngIf=\\\"accountSettingsForm.get('username').errors['minlength'] ||\\r\\n                         accountSettingsForm.get('username').errors['maxlength']\\\"\\r\\n                        >Username length must be between 4 and 10\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"form-group row justify-content-center\\\">\\r\\n                    <label for=\\\"email\\\" class=\\\"col-lg-1 col-form-label\\\">Email</label>\\r\\n                    <div class=\\\"col-lg-10\\\">\\r\\n                        <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" formControlName=\\\"email\\\">\\r\\n                    </div>\\r\\n                    <div class=\\\"col-lg-1\\\">\\r\\n                        <i style=\\\"color: white;\\\" class=\\\"fa fa-pencil fa-2x\\\"></i>\\r\\n                    </div>\\r\\n                    <div *ngIf=\\\"!accountSettingsForm.get('email').valid &&\\r\\n                     accountSettingsForm.get('email').touched\\\" class=\\\"errors col-lg-12 text-danger font-weight-bold\\\">\\r\\n                        <div *ngIf=\\\"accountSettingsForm.get('email').errors['required']\\\"\\r\\n                        >This field is required\\r\\n                        </div>\\r\\n                        <div *ngIf=\\\"accountSettingsForm.get('email').errors['pattern']\\\"\\r\\n                        >Email is not valid\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div *ngIf=\\\"settingsUpdated\\\" class=\\\"success col-lg-12 text-success font-weight-bold\\\">Settings updated\\r\\n                </div>\\r\\n                <button type=\\\"submit\\\" [disabled]=\\\"!accountSettingsForm.valid ||\\r\\n                 (accountSettingsForm.controls.username.value == user.username &&\\r\\n                  accountSettingsForm.controls.email.value == user.email)\\\" class=\\\"btn btn-primary pull-right\\\">Update\\r\\n                </button>\\r\\n            </fieldset>\\r\\n        </form>\\r\\n        <!-- Password change -->\\r\\n        <form *ngIf=\\\"user\\\" (ngSubmit)=\\\"onChangePassword()\\\" class=\\\"account-settings\\\" [formGroup]=\\\"accountPasswordForm\\\">\\r\\n            <fieldset>\\r\\n                <legend>Password</legend>\\r\\n                <div class=\\\"form-group row justify-content-center\\\">\\r\\n                    <label for=\\\"oldPassword\\\" class=\\\"col-lg-1 col-form-label\\\">Old</label>\\r\\n                    <div class=\\\"col-lg-10\\\">\\r\\n                        <input (keydown)=\\\"oldPasswordError? oldPasswordError = null : null\\\" type=\\\"password\\\"\\r\\n                               class=\\\"form-control\\\" id=\\\"oldPassword\\\" formControlName=\\\"oldPassword\\\">\\r\\n                    </div>\\r\\n                    <div class=\\\"col-lg-1\\\">\\r\\n                        <i style=\\\"color: white;\\\" class=\\\"fa fa-pencil fa-2x\\\"></i>\\r\\n                    </div>\\r\\n                    <div *ngIf=\\\"!accountPasswordForm.get('oldPassword').valid &&\\r\\n                     accountPasswordForm.get('oldPassword').touched\\\" class=\\\"errors col-lg-12 text-danger font-weight-bold\\\">\\r\\n                        <div *ngIf=\\\"accountPasswordForm.get('oldPassword').errors['required']\\\"\\r\\n                        >This field is required\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div *ngIf=\\\"oldPasswordError\\\" class=\\\"errors col-lg-12 text-danger font-weight-bold text-danger font-weight-bold\\\">\\r\\n                        {{oldPasswordError}}\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group row justify-content-center\\\">\\r\\n                    <label for=\\\"password\\\" class=\\\"col-lg-1 col-form-label\\\">New</label>\\r\\n                    <div class=\\\"col-lg-10\\\">\\r\\n                        <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" formControlName=\\\"password\\\">\\r\\n                    </div>\\r\\n                    <div class=\\\"col-lg-1\\\">\\r\\n                        <i style=\\\"color: white;\\\" class=\\\"fa fa-pencil fa-2x\\\"></i>\\r\\n                    </div>\\r\\n                    <div *ngIf=\\\"!accountPasswordForm.get('password').valid &&\\r\\n                     accountPasswordForm.get('password').touched\\\" class=\\\"errors col-lg-12 text-danger font-weight-bold\\\">\\r\\n                        <div *ngIf=\\\"accountPasswordForm.get('password').errors['required']\\\"\\r\\n                        >This field is required\\r\\n                        </div>\\r\\n                        <div *ngIf=\\\"accountPasswordForm.get('password').errors['minlength'] ||\\r\\n                        accountPasswordForm.get('password').errors['maxlength']\\\"\\r\\n                        >Password length must be between 8 and 16\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n\\r\\n                <div class=\\\"form-group row justify-content-center\\\">\\r\\n                    <label for=\\\"confirmPassword\\\" class=\\\"col-lg-1 col-form-label\\\">Confirm</label>\\r\\n                    <div class=\\\"col-lg-10\\\">\\r\\n                        <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"confirmPassword\\\"\\r\\n                               formControlName=\\\"confirmPassword\\\">\\r\\n                    </div>\\r\\n                    <div class=\\\"col-lg-1\\\">\\r\\n                        <i style=\\\"color: white;\\\" class=\\\"fa fa-pencil fa-2x\\\"></i>\\r\\n                    </div>\\r\\n                    <div *ngIf=\\\"!accountPasswordForm.get('confirmPassword').valid &&\\r\\n                     accountPasswordForm.get('confirmPassword').touched\\\" class=\\\"errors col-lg-12 text-danger font-weight-bold\\\">\\r\\n                        <div *ngIf=\\\"accountPasswordForm.get('confirmPassword').errors['required']\\\"\\r\\n                        >This field is required\\r\\n                        </div>\\r\\n                        <div *ngIf=\\\"accountPasswordForm.errors && accountPasswordForm.errors['mismatch']\\\"\\r\\n                        >This password and new password don't match\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div *ngIf=\\\"passwordChanged\\\" class=\\\"success col-lg-12 text-success font-weight-bold\\\">Password\\r\\n                    successfully changed\\r\\n                </div>\\r\\n                <button type=\\\"submit\\\" [disabled]=\\\"!accountPasswordForm.valid\\\" class=\\\"btn btn-primary pull-right\\\">Change\\r\\n                    Password\\r\\n                </button>\\r\\n            </fieldset>\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\";","import {Component, OnInit} from \"@angular/core\";\r\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {User} from \"../user.model\";\r\nimport {AccountService} from \"./account.service\";\r\n\r\n@Component({\r\n    selector: 'app-account',\r\n    template: require('./account.component.html'),\r\n    styles: [require('./account.component.css')]\r\n})\r\nexport class AccountComponent implements OnInit {\r\n    accountSettingsForm: FormGroup;\r\n    accountPasswordForm: FormGroup;\r\n    settingsUpdated: boolean = false;\r\n    passwordChanged: boolean = false;\r\n    oldPasswordError: string;\r\n    user: User;\r\n\r\n    constructor(private http: HttpClient, private accountService: AccountService) {\r\n    }\r\n\r\n    initAccountSettingsForm() {\r\n        this.accountSettingsForm = new FormGroup({\r\n            username: new FormControl(this.user.username ? this.user.username : null,\r\n                [\r\n                    Validators.required,\r\n                    Validators.pattern(\"^(\\\\d|\\\\w)+$\"),\r\n                    Validators.minLength(4),\r\n                    Validators.maxLength(10)\r\n                ]),\r\n            email: new FormControl(this.user.email ? this.user.email : null,\r\n                [\r\n                    Validators.required,\r\n                    Validators.pattern(\"(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\\\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\\\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\\\])\")\r\n                ])\r\n        });\r\n    }\r\n\r\n    initAccountPasswordForm() {\r\n        this.accountPasswordForm = new FormGroup({\r\n            oldPassword: new FormControl(null, Validators.required),\r\n            password: new FormControl(null, [\r\n                Validators.minLength(8),\r\n                Validators.maxLength(16),\r\n                Validators.required\r\n            ]),\r\n            confirmPassword: new FormControl(null, [\r\n                Validators.minLength(8),\r\n                Validators.maxLength(16),\r\n                Validators.required\r\n            ])\r\n        }, this.passwordsShouldMatch);\r\n    }\r\n\r\n    onUpdate() {\r\n        const user = new User(this.accountSettingsForm.controls.username.value, this.accountSettingsForm.controls.email.value);\r\n        this.accountService.updateUser(user)\r\n            .catch(err => {\r\n                return Observable.empty();\r\n            })\r\n            .subscribe(res => {\r\n                this.user.username = res['obj']['username'];\r\n                this.user.email = res['obj']['email'];\r\n                this.settingsUpdated = true;\r\n                setTimeout(() => this.settingsUpdated = false, 3000);\r\n                console.log(res);\r\n            });\r\n    }\r\n\r\n    onChangePassword() {\r\n        this.accountService.changePassword(\r\n            this.accountPasswordForm.controls.oldPassword.value,\r\n            this.accountPasswordForm.controls.password.value,\r\n            this.accountPasswordForm.controls.confirmPassword.value\r\n        )\r\n            .catch(err => {\r\n                this.oldPasswordError = err['error']['title'];\r\n                return Observable.empty();\r\n            })\r\n            .subscribe(res => {\r\n                this.oldPasswordError = null;\r\n                this.passwordChanged = true;\r\n                this.accountPasswordForm.reset();\r\n                setTimeout(() => this.passwordChanged = false, 3000);\r\n            });\r\n    }\r\n\r\n    private passwordsShouldMatch(fGroup: FormGroup) {\r\n        return fGroup.get('password').value === fGroup.get('confirmPassword').value\r\n            ? null : {'mismatch': true};\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.http.get('http://localhost:3000/api/user/account')\r\n            .catch(err => {\r\n                return Observable.empty();\r\n            })\r\n            .subscribe(user => {\r\n                this.user = new User(user['username'], user['email']);\r\n                this.initAccountSettingsForm();\r\n                this.initAccountPasswordForm();\r\n            });\r\n    };\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\nimport {User} from \"../user.model\";\r\n\r\n@Injectable()\r\nexport class AccountService {\r\n    constructor(private http: HttpClient) {}\r\n\r\n    updateUser(user: User) {\r\n        return this.http.put('http://localhost:3000/api/user/account', user);\r\n    }\r\n\r\n    changePassword(oldPassword: string, password: string, confirmPassword:string) {\r\n        return this.http.put('http://localhost:3000/api/user/account/password', {oldPassword, password, confirmPassword});\r\n    }\r\n}","import {Injectable} from \"@angular/core\";\r\nimport {CanActivate, Router} from \"@angular/router\";\r\nimport {AuthService} from \"./auth.service\";\r\n\r\n@Injectable()\r\nexport class AuthGuardService implements CanActivate {\r\n\r\n    constructor(private authService: AuthService, private router: Router) {}\r\n\r\n    canActivate(): boolean {\r\n        if (!this.authService.isLoggedIn()) {\r\n            this.router.navigate(['user', 'signin']);\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}","import {NgModule} from \"@angular/core\";\r\nimport {RouterModule, Routes} from \"@angular/router\";\r\nimport {SignupComponent} from \"./signup/signup.component\";\r\nimport {SigninComponent} from \"./signin/signin.component\";\r\nimport {AuthGuardService} from \"./auth-guard.service\";\r\nimport {AccountComponent} from \"./account/account.component\";\r\n\r\nconst authRoutes: Routes = [\r\n    {path: '', redirectTo: 'signin', pathMatch: 'full'},\r\n    {path: 'signup', component: SignupComponent},\r\n    {path: 'signin', component: SigninComponent},\r\n    {path: 'account', component: AccountComponent, canActivate: [AuthGuardService]}\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(authRoutes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AuthRoutingModule {\r\n\r\n}","import {NgModule} from \"@angular/core\";\r\nimport {AuthRoutingModule} from \"./auth-routing.module\";\r\nimport {SignupComponent} from \"./signup/signup.component\";\r\nimport {SigninComponent} from \"./signin/signin.component\";\r\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\r\nimport {AuthService} from \"./auth.service\";\r\nimport {AuthGuardService} from \"./auth-guard.service\";\r\nimport {CommonModule} from \"@angular/common\";\r\nimport {AccountComponent} from \"./account/account.component\";\r\nimport {AccountService} from \"./account/account.service\";\r\nimport {JwtHelperService} from \"@auth0/angular-jwt\";\r\n\r\n@NgModule({\r\n    imports: [\r\n        AuthRoutingModule,\r\n        CommonModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n    ],\r\n    declarations: [\r\n        SignupComponent,\r\n        SigninComponent,\r\n        AccountComponent\r\n    ],\r\n    providers: [\r\n        AuthService,\r\n        AccountService,\r\n        AuthGuardService,\r\n        JwtHelperService\r\n    ]\r\n})\r\nexport class AuthModule {\r\n\r\n}","module.exports = \"<div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"wrapper col-md-12\\\">\\r\\n            <form class=\\\"sign col-md-7\\\" [formGroup]=\\\"signinForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"email\\\">Email address</label>\\r\\n                    <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" placeholder=\\\"Enter email\\\" formControlName=\\\"email\\\">\\r\\n                </div>\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"password\\\">Password</label>\\r\\n                    <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\">\\r\\n                </div>\\r\\n                <div *ngIf=\\\"loginError\\\" class=\\\"errors text-danger font-weight-bold\\\">{{loginError}}</div>\\r\\n                <button [disabled]=\\\"!signinForm.valid\\\" type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Login</button>\\r\\n            </form>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\";","import {Component, OnInit} from \"@angular/core\";\r\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {User} from \"../user.model\";\r\nimport {AuthService} from \"../auth.service\";\r\nimport {Router} from \"@angular/router\";\r\nimport {Observable} from \"rxjs/Observable\";\r\n\r\n@Component({\r\n    selector: 'app-signin',\r\n    template: require('./signin.component.html')\r\n})\r\nexport class SigninComponent implements OnInit {\r\n    signinForm: FormGroup;\r\n    loginError: string;\r\n\r\n    constructor(private authService: AuthService, private router: Router) {\r\n    }\r\n\r\n    onSubmit() {\r\n        const user = new User('user', this.signinForm.value.email, this.signinForm.value.password);\r\n        this.authService.signin(user)\r\n            .catch(err => {\r\n                this.loginError = err['error']['error']['message'];\r\n                return Observable.empty();\r\n            })\r\n            .subscribe(data => {\r\n                    localStorage.setItem('token', data['token']);\r\n                    localStorage.setItem('userId', data['userId']);\r\n                    this.router.navigateByUrl('/user/account');\r\n                }\r\n            );\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.authService.isLoggedIn()) {\r\n            this.router.navigateByUrl('/user/account')\r\n        }\r\n        this.signinForm = new FormGroup({\r\n            email: new FormControl(null, [\r\n                Validators.required,\r\n                Validators.pattern(\"(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\\\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\\\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\\\])\")\r\n            ]),\r\n            password: new FormControl(null, Validators.required)\r\n        });\r\n    }\r\n}","module.exports = \"<div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"wrapper col-md-12\\\">\\r\\n            <form class=\\\"sign col-md-7\\\" [formGroup]=\\\"signupForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"username\\\">Username</label>\\r\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"username\\\" placeholder=\\\"Username\\\"\\r\\n                           formControlName=\\\"username\\\">\\r\\n                    <div class=\\\"errors text-danger font-weight-bold\\\" *ngIf=\\\"usernameExists\\\">Username already exists</div>\\r\\n                    <div *ngIf=\\\"!signupForm.get('username').valid && signupForm.get('username').touched\\\"\\r\\n                         class=\\\"errors text-danger font-weight-bold\\\">\\r\\n                        <div *ngIf=\\\"signupForm.get('username').errors['required']\\\">This field is required</div>\\r\\n                        <div *ngIf=\\\"signupForm.get('username').errors['minlength'] ||\\r\\n                        signupForm.get('username').errors['maxlength']\\\">Username length must be between 4 and 10\\r\\n                        </div>\\r\\n                        <div *ngIf=\\\"signupForm.get('username').errors['pattern']\\\">White spaces or special characters not\\r\\n                            allowed\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"email\\\">Email address</label>\\r\\n                    <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" placeholder=\\\"Enter email\\\"\\r\\n                           formControlName=\\\"email\\\">\\r\\n                    <div class=\\\"errors text-danger font-weight-bold\\\" *ngIf=\\\"emailExists\\\">Email already exists</div>\\r\\n                    <div *ngIf=\\\"!signupForm.get('email').valid && signupForm.get('email').touched\\\"\\r\\n                         class=\\\"errors text-danger font-weight-bold\\\">\\r\\n                        <div *ngIf=\\\"signupForm.get('email').errors['required']\\\">This field is required</div>\\r\\n                        <div *ngIf=\\\"signupForm.get('email').errors['pattern']\\\">Email is not valid</div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"password\\\">Password</label>\\r\\n                    <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" placeholder=\\\"Password\\\"\\r\\n                           formControlName=\\\"password\\\">\\r\\n                    <div *ngIf=\\\"!signupForm.get('password').valid && signupForm.get('password').touched\\\"\\r\\n                         class=\\\"errors text-danger font-weight-bold\\\">\\r\\n                        <div *ngIf=\\\"signupForm.get('password').errors['required']\\\">This field is required</div>\\r\\n                        <div *ngIf=\\\"signupForm.get('password').errors['minlength'] ||\\r\\n                            signupForm.get('password').errors['minlength']\\\">Password length must be between 8 and 16\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"password\\\">Confirm Password</label>\\r\\n                    <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"confirmPassword\\\" placeholder=\\\"Confirm password\\\"\\r\\n                           formControlName=\\\"confirmPassword\\\">\\r\\n                    <div *ngIf=\\\"!signupForm.get('confirmPassword').valid && signupForm.get('confirmPassword').touched\\\"\\r\\n                         class=\\\"errors text-danger font-weight-bold\\\">\\r\\n                        <div *ngIf=\\\"signupForm.get('confirmPassword').errors['required']\\\">This field is required</div>\\r\\n                        <div *ngIf=\\\"signupForm.errors && signupForm.errors['mismatch']\\\">Passwords don't match</div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <button [disabled]=\\\"!signupForm.valid\\\" type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\r\\n            </form>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\";","import {Component, OnInit} from \"@angular/core\";\r\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {AuthService} from \"../auth.service\";\r\nimport {User} from \"../user.model\";\r\nimport {Observable} from \"rxjs/Observable\";\r\n\r\n\r\n@Component({\r\n    selector: 'app-signup',\r\n    template: require('./signup.component.html')\r\n})\r\nexport class SignupComponent implements OnInit{\r\n    signupForm: FormGroup;\r\n    usernameExists: boolean;\r\n    emailExists: boolean;\r\n\r\n    constructor(private authService: AuthService) {}\r\n\r\n    onSubmit() {\r\n        this.usernameExists = false;\r\n        this.emailExists = false;\r\n\r\n        const user = new User(\r\n            this.signupForm.value.username,\r\n            this.signupForm.value.email,\r\n            this.signupForm.value.password,\r\n            this.signupForm.value.confirmPassword\r\n        );\r\n\r\n        this.authService.signup(user)\r\n            .catch(err => {\r\n                if (err['error']['error']['errors']['username'] && err['error']['error']['errors']['username']['kind'] == 'unique') {\r\n                    this.usernameExists = true;\r\n                }\r\n                if (err['error']['error']['errors']['email'] && err['error']['error']['errors']['email']['kind'] == 'unique') {\r\n                    this.emailExists = true;\r\n                }\r\n                return Observable.empty()\r\n            })\r\n            .subscribe(res => console.log(res));\r\n        this.signupForm.reset();\r\n    }\r\n\r\n    private passwordsShouldMatch(fGroup: FormGroup) {\r\n        return fGroup.get('password').value === fGroup.get('confirmPassword').value\r\n            ? null : {'mismatch': true};\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.signupForm = new FormGroup({\r\n            username: new FormControl(null, [\r\n                Validators.required,\r\n                Validators.minLength(4),\r\n                Validators.maxLength(10),\r\n                Validators.pattern(\"^(\\\\d|\\\\w)+$\")\r\n            ]),\r\n            email: new FormControl(null, [\r\n                Validators.required,\r\n                Validators.pattern(\"(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\\\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\\\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\\\])\")\r\n            ]),\r\n            password: new FormControl(null, [\r\n                Validators.required,\r\n                Validators.minLength(8),\r\n                Validators.maxLength(16)\r\n            ]),\r\n            confirmPassword: new FormControl(null, [\r\n                Validators.required,\r\n                Validators.minLength(8),\r\n                Validators.maxLength(16)\r\n            ])\r\n        }, this.passwordsShouldMatch)\r\n    }\r\n}","export class User {\r\n    constructor(\r\n        public username?: string,\r\n        public email?: string,\r\n        public password?:string,\r\n        public confirmPassword?:string\r\n    ) {}\r\n}"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACRA;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAOA;AAQA;AAAA;AAAA;AALA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA5FA;AALA;AACA;AACA;AACA;AACA;AASA;AARA;AA6FA;AAAA;AA7FA;;;;;;;;;;;;;;;;;;;;;;;;ACZA;AACA;AAIA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AATA;AADA;AAEA;AADA;AAUA;AAAA;AAVA;;;;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAXA;AADA;AAGA;AAFA;AAYA;AAAA;AAZA;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAEA;AAFA;AAJA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAFA;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAqBA;AAAA;AAEA;AAFA;AAnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAFA;;;;;;;;;;;;AC/BA;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AAMA;AAIA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAJA;AACA;AACA;AACA;AAKA;AAJA;AAkCA;AAAA;AAlCA;;;;;;;;;;;;ACXA;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAOA;AAKA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA;AAJA;AACA;AACA;AACA;AAMA;AALA;AA6DA;AAAA;AA7DA;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAPA;;;;;A","sourceRoot":""}